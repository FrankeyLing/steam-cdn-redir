

const readline = require('readline');
const SteamUser = require('steam-user');
const SteamTotp = require('steam-totp'); // Ensure to require steam-totp if using two-factor authentication
const STEAM_ACCOUNT_2FA_SECRET = ''; // Your shared_secret if you have mobile authentication enabled, or blank to prompt for a code from stdin

const defaultOptions = require('../resources/default_options.js');

let user = new SteamUser(defaultOptions);

let username = '';
let password = '';
let appid = '';
let depotid = '';
let vhost = '';

function logOnToSteam() {
    return new Promise((resolve, reject) => {
        // user.logOn({
        //     accountName: username,
        //     password: password,
        //     twoFactorCode: STEAM_ACCOUNT_2FA_SECRET ? SteamTotp.generateAuthCode(STEAM_ACCOUNT_2FA_SECRET) : undefined
        // });
        user.logOn();

        user.on('loggedOn', () => {
            console.log('Logged on to Steam');
            resolve();
        });

        user.on('error', (err) => {
            reject(err);
        });
    });
}

function getToken(appid, depotid, vhost) {
    return new Promise(async (resolve, reject) => {
        try {
            // let { servers } = await user.getContentServers(appid);
            // let server1 = servers[0];
            let token = await user.getCDNAuthToken(appid, depotid, vhost);
            resolve(token.token);
        } catch (err) {
            reject(err);
        }
    });
}

// 创建一个接口来读取标准输入
const rl = readline.createInterface({
    input: process.stdin,
    output: process.stdout,
    terminal: false
});

let loginCompleted = false;

// 监听标准输入
rl.on('line', async (line) => {
    try {
        if (!loginCompleted) {
            // 第一次输入用户名和密码
            const data = JSON.parse(line);
            username = data.username;
            password = data.password;

            await logOnToSteam();
            console.log('Steam login successful. Ready to accept input.');
            loginCompleted = true;
        } else {
            // 第二次及之后输入 appid、depotid 和 vhost
            const data = JSON.parse(line);
            appid = parseInt(data.appid);
            depotid = parseInt(data.depotid);
            vhost = data.vhost;

            // 调用函数并输出结果
            const token = await getToken(appid, depotid, vhost);
            console.log(JSON.stringify({ token: token }));
        }
    } catch (err) {
        console.error(JSON.stringify({ error: err.message }));
    }
});
